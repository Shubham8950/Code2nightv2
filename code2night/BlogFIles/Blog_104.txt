<h3><b>Ajax</b>&nbsp;</h3><p>So starting of from the beginning Ajax is used for Asynchronous Javascript and XML. We can use it for many purposes. Few basic uses of Ajax are:-</p><ul style="box-sizing: inherit; color: rgb(0, 0, 0); font-family: Verdana, sans-serif; font-size: 16px;"><li style="box-sizing: inherit;">Update page without reloading the page providing better performance.</li><li style="box-sizing: inherit;">Request data from a server - after the page has loaded which can be used in loading Partial Views.</li><li style="box-sizing: inherit;">Send data to a server without reload - in the background making it easier to performance Save, Delete operations smoothly.</li></ul><h3><b>Ajax in Asp.Net MVC</b></h3><p>Ajax can be used anywhere where we can use jquery. But we will be watching few examples of different ways of using Ajax in Asp.Net MVC. We will be posting data on MVC Controller without refreshing the page. So let's start from beginning:-</p><p><b>Step-1</b></p><br><p>So , first of all we will be creating a new view and adding few field on it . Now we will be trying to send the values of these fields on controller without reload and especially using Ajax.</p><p>So We will add a new view and few fields on it.</p><pre>@{
    ViewBag.Title = "Home Page";
}
&lt;script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"&gt;&lt;/script&gt;
&lt;div class="jumbotron"&gt;
    &lt;h2&gt;Ajax Call Getting started&lt;/h2&gt;
&lt;/div&gt;

&lt;div class="form-group"&gt;
    &lt;label for="email"&gt;Employee Id:&lt;/label&gt;
    &lt;input type="text" class="form-control" id="txtId" placeholder="Enter Employee Id" name="email"&gt;
&lt;/div&gt;
&lt;div class="form-group"&gt;
    &lt;label for="pwd"&gt;Employee Name:&lt;/label&gt;
    &lt;input type="text" class="form-control" id="txtName" placeholder="Enter Employee Name" name="pwd"&gt;
&lt;/div&gt;
&lt;div class="form-group"&gt;
    &lt;label for="pwd"&gt;Employee Salary:&lt;/label&gt;
    &lt;input type="text" class="form-control" id="txtSalary" placeholder="Enter Employee Salary" name="pwd"&gt;
&lt;/div&gt;
&lt;input type="button" id="btnGet" class="btn btn-success" value="Ajax Call Type 1" /&gt;
&lt;input type="button" id="btnGet2" class="btn btn-success" value="Ajax Call Type 2" /&gt;
&lt;input type="button" id="btnGet3" class="btn btn-success" value="Ajax Call Type 3" /&gt;
&lt;input type="button" id="btnGet4" class="btn btn-success" value="Ajax Call Type 4" /&gt;
&lt;input type="button" id="btnGet5" class="btn btn-success" value="Ajax Call Type 5" /&gt;

&lt;script type="text/javascript"&gt;
    $(function () {
        $("#btnGet").click(function () {
            var empIds = $("#txtId").val();
            var empNames = $("#txtName").val();
            var empSalarys = $("#txtSalary").val();
            $.ajax({
                type: "POST",
                url: "/Home/AjaxMethod",
                data: '{empId: "' + empIds + '" , empName: "' + empNames + '" , empSalary: "' + empSalarys + '" }',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (response) {
                    alert("Hello: " + response.EmpName + " Your Employee Id Is: " + response.EmpId + "And Your Salary Is: " + response.EmpSalary);
                },
                failure: function (response) {
                    alert(response.responseText);
                },
                error: function (response) {
                    alert(response.responseText);
                }
            });
        });
    });

    // second
    $(function () {
        $("#btnGet2").click(function () {
            debugger;
            var empIds = $("#txtId").val();
            var empNames = $("#txtName").val();
            var empSalarys = $("#txtSalary").val();
            $.ajax({
                url: "/Home/AjaxMethod",
                dataType: "json",
                type: "POST",
                cache: false,
                data: { empId: empIds, empName: empNames, empSalary: empSalarys },
                success: function (response) {
                    alert("Hello: " + response.EmpName + " Your Employee Id Is: " + response.EmpId + "And Your Salary Is: " + response.EmpSalary);
                },
                failure: function (response) {
                    alert(response.responseText);
                },
                error: function (response) {
                    alert(response.responseText);
                }
            })
        })
    });


    //third
    $(function () {
        $("#btnGet3").click(function () {
            var intrestedInAll =
            {
                EmpId: $("#txtId").val(),
                EmpName: $("#txtName").val(),
                EmpSalary: $("#txtSalary").val(),
            };
            debugger;
            $.ajax({
                url: '/Home/AjaxMethodWithObject',
                type: 'POST',
                data: { "queryFilter": JSON.stringify(intrestedInAll) },
                cache: false,
                success: function (response) {
                    alert("Hello: " + response.EmpName + " Your Employee Id Is: " + response.EmpId + "And Your Salary Is: " + response.EmpSalary);
                },
                failure: function (response) {
                    alert(response.responseText);
                },
                error: function (response) {
                    alert(response.responseText);
                }
            });
        });
    });

    //fourth

    $(function () {
        $("#btnGet4").click(function () {
            var personModel =
            {
                EmpId: $("#txtId").val(),
                EmpName: $("#txtName").val(),
                EmpSalary: $("#txtSalary").val(),
            };
            personModel = JSON.stringify(personModel);
            debugger;
            $.ajax({
                type: "POST",
                url: "/Home/AjaxMethodWithModel",
                data: personModel,
                dataType: "json",
                contentType: 'application/json; charset=utf-8',
                success: function (response) {
                    alert("Hello: " + response.EmpName + " Your Employee Id Is: " + response.EmpId + "And Your Salary Is: " + response.EmpSalary);
                },
                failure: function (response) {
                    alert(response.responseText);
                },
                error: function (response) {
                    alert(response.responseText);
                }
            });
        });
    });

    //fifth
    function GetAjaxDataPromise(url, postData) {
        debugger;
        var promise = $.post(url, postData, function (promise, status) {
        });
        return promise;
    };
    $(function () {
        $("#btnGet5").click(function () {
            debugger;
            var promises = GetAjaxDataPromise('@Url.Action("AjaxMethod", "Home")', { EmpId: $("#txtId").val(), EmpName: $("#txtName").val(), EmpSalary: $("#txtSalary").val() });
            promises.done(function (response) {
                debugger;
                alert("Hello: " + response.EmpName + " Your Employee Id Is: " + response.EmpId + "And Your Salary Is: " + response.EmpSalary);
            });
        });
    });

&lt;/script&gt;
</pre><div><br></div><div>So this a view we have added with few fields and few jquery methods that we will be learning next in blog. So we will see parts of this view one by one with usings. So the first section showed below is used to add input fields on the View. You can add fields according to your requirement. For this example we will be adding 3&nbsp; input fields on the view.</div><div><br></div><pre style="line-height: 1.42857;">@{ ViewBag.Title = "Home Page";
}
&lt;script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"&gt;&lt;/script&gt;
&lt;div class="jumbotron"&gt;
    &lt;h2&gt;Ajax Call Getting started&lt;/h2&gt;
&lt;/div&gt;

&lt;div class="form-group"&gt;
    &lt;label for="email"&gt;Employee Id:&lt;/label&gt;
    &lt;input type="text" class="form-control" id="txtId" placeholder="Enter Employee Id" name="email"&gt;
&lt;/div&gt;
&lt;div class="form-group"&gt;
    &lt;label for="pwd"&gt;Employee Name:&lt;/label&gt;
    &lt;input type="text" class="form-control" id="txtName" placeholder="Enter Employee Name" name="pwd"&gt;
&lt;/div&gt;
&lt;div class="form-group"&gt;
    &lt;label for="pwd"&gt;Employee Salary:&lt;/label&gt;
    &lt;input type="text" class="form-control" id="txtSalary" placeholder="Enter Employee Salary" name="pwd"&gt;
&lt;/div&gt;</pre><div><br></div><div>So After adding the fields we have added five different button. All of them will be used for posting input fields data on controller but we will be using different way of using Ajax in all buttons. You can add these buttons to your view which are calling jquery methods on click.</div><div><br></div>
<pre>&lt;input type="button" id="btnGet" class="btn btn-success" value="Ajax Call Type 1"&gt;
&lt;input type="button" id="btnGet2" class="btn btn-success" value="Ajax Call Type 2"&gt;
&lt;input type="button" id="btnGet3" class="btn btn-success" value="Ajax Call Type 3"&gt;
&lt;input type="button" id="btnGet4" class="btn btn-success" value="Ajax Call Type 4"&gt;
&lt;input type="button" id="btnGet5" class="btn btn-success" value="Ajax Call Type 5"&gt;</pre><div><br></div><div>So when you will click first button . This jquery click event will be fired and as you can say we have used ajax in this method. So you can understand&nbsp; while using Ajax we need few thing to describe there. We need <b>URL </b>where we need to post data. Url entered in this method means&nbsp; <b>Home</b> is <b>controller</b> and <b>AjaxMethod</b> is the <b>Action</b> name.</div><div><br></div><div><b>Data - </b>This is where you have to pass the data you want to post on controller . As you can see we have to send data in <b>JSON </b>format.</div><div><br></div><div>So while using JSON you have to specify key and value pair. Remember the key you secify here must be same which you have used as parameter in controller. We will be watching how to receive these posted values in controller action.</div><div><br></div><pre> $(function () {
        $("#btnGet").click(function () {
            var empIds = $("#txtId").val();
            var empNames = $("#txtName").val();
            var empSalarys = $("#txtSalary").val();
            $.ajax({
                type: "POST",
                url: "/Home/AjaxMethod",
                data: '{empId: "' + empIds + '" , empName: "' + empNames + '" , empSalary: "' + empSalarys + '" }',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (response) {
                    alert("Hello: " + response.EmpName + " Your Employee Id Is: " + response.EmpId + "And Your Salary Is: " + response.EmpSalary);
                },
                failure: function (response) {
                    alert(response.responseText);
                },
                error: function (response) {
                    alert(response.responseText);
                }
            });
        });
    });</pre><div><br></div><div>So the data posted in previous jquery ajax method is posted to this action method.You can see we have added same parameters which we have posted previously from jquery method.</div><div><br></div><pre> [HttpPost]
        public JsonResult AjaxMethod(string empId, string empName, string empSalary)
        {
            PersonModel person = new PersonModel
            {
                EmpId = empId,
                EmpName = empName,
                EmpSalary = empSalary
            };
            return Json(person);
        }
</pre><div><b><br></b></div><div><b>Method-2</b></div><div>So In this method we have made some changes in the data values. Earlier we were using JSON syntax for sending data while in this we will simply send data in the form of object. This is more simpler way of sending data as not many syntax issues in this. Apart from how we adding parameters not much difference here.</div><div><br></div><pre> // second
    $(function () {
        $("#btnGet2").click(function () {
            debugger;
            var empIds = $("#txtId").val();
            var empNames = $("#txtName").val();
            var empSalarys = $("#txtSalary").val();
            $.ajax({
                url: "/Home/AjaxMethod",
                dataType: "json",
                type: "POST",
                cache: false,
                data: { empId: empIds, empName: empNames, empSalary: empSalarys },
                success: function (response) {
                    alert("Hello: " + response.EmpName + " Your Employee Id Is: " + response.EmpId + "And Your Salary Is: " + response.EmpSalary);
                },
                failure: function (response) {
                    alert(response.responseText);
                },
                error: function (response) {
                    alert(response.responseText);
                }
            })
        })
    });
</pre><div><br></div><div>So the data posted in object form is received in the same format we have used in last method. Not many changes here but remember keys must be same and also <b>HttpPost</b>. must be used.</div><div><br></div><pre> [HttpPost]
        public JsonResult AjaxMethod(string empId, string empName, string empSalary)
        {
            PersonModel person = new PersonModel
            {
                EmpId = empId,
                EmpName = empName,
                EmpSalary = empSalary
            };
            return Json(person);
        }
</pre><div><b><br></b></div><div><b>Method-3</b></div><div>So , The third way of sending data to controller is used when we want to receive data in model parameter. For that we can create jquery object and than use jquery stringify to convert that to json and post.</div><div><br></div><pre>  //third
    $(function () {
        $("#btnGet3").click(function () {
            var intrestedInAll =
            {
                EmpId: $("#txtId").val(),
                EmpName: $("#txtName").val(),
                EmpSalary: $("#txtSalary").val(),
            };
            debugger;
            $.ajax({
                url: '/Home/AjaxMethodWithObject',
                type: 'POST',
                data: { "queryFilter": JSON.stringify(intrestedInAll) },
                cache: false,
                success: function (response) {
                    alert("Hello: " + response.EmpName + " Your Employee Id Is: " + response.EmpId + "And Your Salary Is: " + response.EmpSalary);
                },
                failure: function (response) {
                    alert(response.responseText);
                },
                error: function (response) {
                    alert(response.responseText);
                }
            });
        });
    });</pre><div><br></div><div>So when post jquery object in json form we can add model to action parameters. Remember properties of model must be same like jquery object we have posted.</div><div>.</div><pre> [HttpPost]
        public JsonResult AjaxMethodWithObject(string queryFilter)
        {
            PersonModel personModel = JsonConvert.DeserializeObject&lt;PersonModel&gt;(queryFilter);

            return Json(personModel);
        }</pre><div><span style="font-weight: 700;">Method-4</span></div><div>So in this method we will be posting jquery object without using stringify. This method is better as this minimizes complex syntax while achieving same working.</div><pre> //fourth

    $(function () {
        $("#btnGet4").click(function () {
            var personModel =
            {
                EmpId: $("#txtId").val(),
                EmpName: $("#txtName").val(),
                EmpSalary: $("#txtSalary").val(),
            };
            personModel = JSON.stringify(personModel);
            debugger;
            $.ajax({
                type: "POST",
                url: "/Home/AjaxMethodWithModel",
                data: personModel,
                dataType: "json",
                contentType: 'application/json; charset=utf-8',
                success: function (response) {
                    alert("Hello: " + response.EmpName + " Your Employee Id Is: " + response.EmpId + "And Your Salary Is: " + response.EmpSalary);
                },
                failure: function (response) {
                    alert(response.responseText);
                },
                error: function (response) {
                    alert(response.responseText);
                }
            });
        });
    });</pre><div><br></div><div>So the receiving part for this method is same as previous one. Not many changes here.</div><div><br></div><pre>  [HttpPost]
        public JsonResult AjaxMethodWithModel(PersonModel personModel)
        {
            PersonModel person = new PersonModel
            {
                EmpId = personModel.EmpId,
                EmpName = personModel.EmpName,
                EmpSalary = personModel.EmpSalary
            };
            return Json(person);
        }</pre><div><span style="font-weight: 700;"><br></span></div><div><span style="font-weight: 700;">Method-5</span></div><div>This method is one of the best we can use as it allows us to post data to separate parameters as well as Model with same code.You have to pass the url and data as jquery object.The following example is with jquery promise.&nbsp;</div><div><br></div><pre>    //fifth
    function GetAjaxDataPromise(url, postData) {
        debugger;
        var promise = $.post(url, postData, function (promise, status) {
        });
        return promise;
    };
    $(function () {
        $("#btnGet5").click(function () {
            debugger;
            var promises = GetAjaxDataPromise('@Url.Action("AjaxMethod", "Home")', { EmpId: $("#txtId").val(), EmpName: $("#txtName").val(), EmpSalary: $("#txtSalary").val() });
            promises.done(function (response) {
                debugger;
                alert("Hello: " + response.EmpName + " Your Employee Id Is: " + response.EmpId + "And Your Salary Is: " + response.EmpSalary);
            });
        });
    });</pre><div>So as we have told earlier the data posted from last method can be received with both the ways&nbsp; You can try that and comment if you have any issues.</div><pre> [HttpPost]
        public JsonResult AjaxMethod(string empId, string empName, string empSalary)
        {
            PersonModel person = new PersonModel
            {
                EmpId = empId,
                EmpName = empName,
                EmpSalary = empSalary
            };
            return Json(person);
        } </pre><pre>[HttpPost]
        public JsonResult AjaxMethodWithModel(PersonModel personModel)
        {
            PersonModel person = new PersonModel
            {
                EmpId = personModel.EmpId,
                EmpName = personModel.EmpName,
                EmpSalary = personModel.EmpSalary
            };
            return Json(person);
        }</pre><p>The complete code for controller is</p><pre><font face="Menlo, Monaco, Consolas, Courier New, monospace"><span style="font-size: 13px; letter-spacing: normal;">  public class HomeController : Controller
    {
        public ActionResult Index()
        {
            return View();
        }

        [HttpPost]
        public JsonResult AjaxMethod(string empId, string empName, string empSalary)
        {
            PersonModel person = new PersonModel
            {
                EmpId = empId,
                EmpName = empName,
                EmpSalary = empSalary
            };
            return Json(person);
        }


        [HttpPost]
        public JsonResult AjaxMethodWithObject(string queryFilter)
        {
            PersonModel personModel = JsonConvert.DeserializeObject&lt;PersonModel&gt;(queryFilter);

            return Json(personModel);
        }

        [HttpPost]
        public JsonResult AjaxMethodWithModel(PersonModel personModel)
        {
            PersonModel person = new PersonModel
            {
                EmpId = personModel.EmpId,
                EmpName = personModel.EmpName,
                EmpSalary = personModel.EmpSalary
            };
            return Json(person);
        }
    }</span></font><b><br></b></pre><p><b>Response-</b></p><p>So When jquery ajax request completed you can check the response from <b>success </b>method. You can check in the examples above. So this is how we can use Ajax in Asp.Net MVC.</p>    

